
Шаблонизатор pfTemple
=====================

Класс templet/pfTemple реализует расширяемую систему шаблонов, позволяющую эффективно разделять в программах данные, контролеры и представления. Шаблонизатор позволяет использовать несколько шаблонных движков ("энжинов"), реализующих различные языки шаблонизации. В настоящее время доступен только один энжин - parser (pfTempleParserEngine), использующего в качестве языка шаблонов сам Парсер. Шаблоны могут располагаться как на диске, так и в любом произвольном "хранилище".



Основы
------
Базовая схем работы с шаблонизатором состоит из трех этапов:
- Создание объекта класса pfTemple (конструктор create).
- Добавление шаблонных переменных через метод pfTemple.assign[aVarName;aValue]
- Исполнение шаблона через метод pfTemple.render[aTemplateName;aOptions]

Рассмотрим пример:        

Шаблон (/../views/html.pt)
  <html> 
    <head> 
      <title>$title</title>
    </head>
    <body>  
      $body
    </body>
  </html>

Код (index.html)
  $temple[^pfTemple::create[]]
  ^temple.assign[title;Заголовок страницы]
  ^temple.assign[body;Тело страницы]
  ^temple.render[html.pt]  

Результат:
  <html> 
    <head> 
      <title>Заголовок страницы</title>
    </head>
    <body>  
      Тело страницы
    </body>
  </html>

По коду видно, что шаблонизатор загрузил и выполнил команды языка Парсер из шаблона html.pt, располагающегося на диске в папке /../views/, при этом в самом шаблоне стали доступны переменные title и body, которые мы установили в коде программы.



Энжины
------
Шаблонизатор позволяет создавать и использовать произвольные языки для шаблонов ("энжины"). В качестве языка для базового энжина выбран сам Парсер (имя энжина - parser), при этом реализация максимально использует возможности языка. Добавить другие языки шаблонов (XSLT, FastTemplet) очень просто: достаточно реализовать класс, реализующий интерфейс интерфейс pfTempleEngine и зарегистрирвоать его через метод pfTemle.registerEngine. Подробности смотрите в коде (templet/pfTemple.p). Выбор энжина происходит по расширению имени файла шаблона, но программист всегда может явно указать язык шаблона (^pfTemple.render[...;$.engine[engine_name]]).



Хранилища шаблонов
------------------
Шаблонизатор поддерживает разные схемы хранения файлов. Пути к шаблонам задаются с использованием url-подобной схемы: schema://path/to/template.ext. Хранилище в файловой системе (file) уже включено в шаблонизатор, при этом указывать схему для файлов не нужно, т.е. вместо file://path/to/template.ext можно просто написать /path/to/template.ext. Поиск файлов происходит по списку путей. Базовый путь указывается в конструкторе через $.templateFolder, значение по умолчанию - /../views/. Вы можете добавить еще несколько папок через метод pfTemple.appendPath[aPath]. Поиск шаблонов в папках производится в обратном порядке, т.е. сначала ищем шаблон в папке, которая добавлена последней. При наследовании шаблонов (см. раздел "Parser-engine") поиск сначала выполняется в папке с самим шаблоном, а потом уже по списку путей. Файловое хранилище кеширует, загруженные шаблоны в памяти, т.е. при повторном обращении к одному и тому же файлу повторного обращения к диску происходить не будет.

Чтобы добавить новое хранилище, необходимо написать класс-наследник для pfTempleStorage и зарегистрировать его с помощью метода pfTemple.registerStorage.


Parser-engine
-------------

Переменные
~~~~~~~~~~
Энжин поддерживает все основные операторы языка Парсер, в тексте шаблона можно определять функции. Сам шаблон автоматически "оборачивается" в парсеровский класс, что позволяет локализовать переменные и функции шаблона от остальной программы. В шаблонах можно создавать методы. Если в шаблоне пристутсвует несколько методов, то для выполнения шаблона будет вызван метод main. Если в шаблоне не указан ни один метод, то все его тело считается текстом метода main.

В шаблоны можно передавать переменные не только базовых типов, но объекты и ссылки на функции:

@function[aArg]
  $aArg

@main[]            
  ^temple.assign[now;^date::now[]]
  ^temple.assign[formater;^formaterClass::create[]]
  ^temple.assign[method;$function]
  
В шаблоне:
  ^formater.formatDate[$now]
  ^method[Данные]

Естественно никто не мешает вам использовать весь арсенал переменных и классов доступных коду основной программы, но лучше все-таки ограничится теми переменными, которые явно переданы в шаблон через метод assign - это сильно упростит отладку. 

В шаблоне есть понятие глобальных и локальных переменных. Глобальные - это все переменные, установленные через метод pfTemple.assign, а локальные - это переменные переданные в параметре $.vars метода render (^pfTemple.render[...;$.vars[$.localVar[]]]). На время рендера шаблона локальные переменные перекрывают одноименные глобальные-переменные. Получить доступ к глобальным и локальным переменным в шаблоне можно также через служебные переменные __GLOBAL__ и __LOCAL__ ($__GLOBAL__.var, $__LOCAL__.var). 


Наследование
~~~~~~~~~~~~

Шаблоны parser-engine поддерживают несколько деректив (#@BASE, #@IMPORT), позволяющих выполнять наследование и импорт шаблонов. Рассмотрим следующий пример:


Шаблон №1 (/../views/layouts/default.pt)
@main[]
  <html> 
    <head> 
      <title>^title[]</title>
    </head>
    <body>  
      ^css[]
      ^body[]
    </body>
  </html>

@title[]
 Заголовок
 
@body[]
 Текст страницы.

@css[] 
  <style>body{background-color: gray^;}</style>


Шаблон №2 (/../views/shared/copyright.pt)
@copyright[]
  <div class="copyright"><p>© Vasya Pupkin, 2010</p></div>


Шаблон №3 (/../views/site/index.pt)
#@BASE /layouts/default.pt
#@IMPORT /shared/copyright.pt
@title[]
Главная страница
  
@body[]
  <div class="body">^BASE:body[]</div>
  ^copyright[]

Код (index.html)
  $temple[^pfTemple::create[]]
  ^temple.render[/site/index.pt]  

Результат:
  <html> 
    <head> 
      <title>Главная страница</title>
    </head>
    <body>  
    <style>body{background-color: gray^;}</style>
    <div class="body">Текст страницы.</div>
    <div class="copyright"><p>© Vasya Pupkin, 2010</p></div>
    </body>
  </html>


Фактически при вызове temple.render произошло следующее: был "собран" класс для  шаблона №3 который является наследником шаблона №1 (обратите внимание на метод body из третьего шаблона, который обращается к методу предка) и включает в себя методи из шаблона №2, после чего выполнен код и получен результат сборки.

Есть несколько достаточно простых правил:
- У шаблона может быть только один предок, т.е. в шаблоне может содержаться только одна директива #@BASE. При этом возможно рекурсивное наследование - родительский шаблон может сам являться наследником другого шаблона.
- Обращение к перекрытым методам предка выполняется через ^BASE:method[].
- Метод main шаблона переименовывается в __main___, поэтому для вызова метода main предка необходимо использовать конструкцию ^BASE:__main__[].
- Импортировать можно любое количество шаблонов (директив #@IMPORT может быть несколько). В импортированных шаблонах наследование не поддерживается, но возможен рекурсивный импорт шаблонов. Одноименные методы из импортированных шаблонов перекрывают друг друга (в порядке задания деректив) и методы предков текущего шаблона - будьте внимательны.



Использование шаблонизатора в pfSiteModule
==========================================

pfTemple автоматически доступен из модуля через переменную TEMPLET. 

Для удобства в модулях реализованы дополнительные функции, которые упрощают работу с шаблонизатором:                       
- Метод pfSiteModule.render[...] вызывает метод TEMPLET.render, при этом перед именем шаблона добавляется префикс модуля. Т.е. шаблоны для модуля, смонтированного по адресу /some_module/ можно разместить в /../views/some_module/ и метод render модуля сам подгрузит их именно из этой папки. Если путь к шаблону начинается с "/" (абсолютный путь), то префикс будет проигнорирован и загрузка будет выполнена по штатной схеме шаблонизатора.
- Метод pfSiteModule.assignVar создает отдельный список "локальных переменных модуля", которые автоматически передаются TEMPLET.render. 
- Экземпляр шаблонизатора автоматически передается всем подчиненным модулям, т.е. в менеджере можно задать глобальные переменные через TEMPLET.assign (форматеры, текщую дату и пр.) и они автоматически будут доступны во всех вложенных модулях.


  