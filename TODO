PF Library
Copyright (c) Oleg Volchkov
-------------------------------------

TO-DO List...

* Перейти на повсеместное использование pfAssert для обработки утверждений.
* Покрыть unit-тестами как можно больше классов.

+ Переход на utf-8.
  - Вики и типографика требуют переписывания с использованием регулярок, совместимых с юникодом.
  
---------------------------------

Добавить метод pfTemplet.renderString, который сможет грузить шаблон из строки.

---------------------------------

Новая схема маршрутизации

  + Класс pfRouter
  + path1/path2/:some/:where/:{arg1}-:arg2.:format/*trap
     -> ^path1\/path2(?:\/([^\./]+)(?:/(\d+)(?:/([^\./]+)-([^\./]+)(?:\.([^\./]+)(?:/(.+))?)?)?)?)?$    

    @assign[aPattern;aRouteTo;aOptions][lCompiledPattern]
    ## Добавляет новый шаблон aPattern в список маршрутов 
    ## aRouteTo - новый маршрут (может содержать переменные)
    ## aOptions.defaults[] - хеш со значениями переменных шаблона "по-умолчанию" 
    ## aOptions.requirements[] - хеш с регулярными выражениями для проверки переменных шаблона
    ## aOptions.prefix[] - дополнительный, вычисляемый префикс для путей (может содержать переменные)
  
    options.requirements[$.where[\d+] $.arg2[\d+]]

    - Разбиваем строку на части по разделителям [\./]
    - Если в части есть переменные, то формируем для нее регулярное выражение "(?:....". 
      Если определены $.requirements, то пытаемся использовать их для формирования регулярок.
    - Собираем части в одно регулярное выражение и закрываем скобки ")?"*количество_частей_с_переменными.
    

    path1/path2/got/123/23-45.xml/last/path/part
     -> $.some[got] $.where[123] $.arg1[23] $.arg2[45] $.format[xml] $.trap[last/path/part]
  
    Порядок следования шаблонов от частного к общему.
      board/help;forum/help
      :controler/help;main/help <- если поставить первым, то правило для board/help не выполнится никогда 
      
  + Параметр-ловушка (*var_name) в который попадают все оставшиеся части маршрута.
  + Для шаблона можно задать хэш с дефолтными значениями options.defaults[].
  + Возможность подстановки параметров в новый экшн
      new/action/:some/:trap -> new/action/got/last/path/part
      Обработка предельно простая - просто подставляем переменные.
  + Отдельная обработка пустого экшна (@router.root).   
  + Возможность задания префикса (с переменными), который можно использовать в подмодуле.

  + Если dispatch получил aOptions.prefix, то используем его вместо uriPrefix модуля.
    Но делаем это только на время работы конкретного вызова dispatch'а.
  
  - Реверс для урлов:
    ? Похоже надо идти в обратную сторону по порядку шаблонов.
    ? Как обрабатывать ситуацию с наличием недостающих параметров.
    

---------------------------------
 
pfModule
  - Ревизия модуля. Код старый, возможно есть неудачные места.

  + Сделать возможность передавать в обработчики экшнов не только хеши, но и классы.
    + Метод cleanMethodArgument теперь не "убивает" параметр, если он не хеш.
  + Сделать возможность возврата из обработчиков экшнов классов.


pfSiteModule
  - Добавление приложений  

+ Классы pfHTTPResponse 
  ? Специальные наследники pfHTTPFileResponse, pfHTTPXMLResponse, 
    pfHTTPTextResponse, pfHTTPAJAXResponse. 

* Работа с формами
    web/forms/*
    http://www.djangoproject.com/documentation/newforms/

pfCurlFie
  * Добавить в конструктор проверку входных параметров.
  * Сделать передачу пути к curl'у прямо в конструкторе. 
  * Сделать проверку сертификатов и ключей для SSL.
  * Проверить работу по ftp/ftps. 
  * Сделать работу по протоколу file.
  * Добавить поддержку редиректов для протокола http.
  * Сделать работу с датами при передаче заголовков удаленному серверу.
  * Проверить работу http-авторизации.
  * Сделать работу с cookie.

* Работа с сессиями (анонимными и пользовательскими) 
  с возможность использования разных хранилищ данных.

* Generic-модули для поддержки CRUD-архитектуры.

* Работа с REST-сервисами.
  * Модуль умеющий маршрутизировать rest-запросы
  * Класс с функциями для реализации доступа к rest-сервисам.

pfCache
  * Рефакторинг класса для работы с разными хранилищами данных.


pfXMLBuilder 
  Класс должен уметь формировать xml из базовых парсерных типов (string, int, double, date, hash, table, xdoc, xnode).
  Для пользовательских классов ищем методы class.__asXML или class.__asString.
  ? Что делать с классом file?

pfTemplet
  + Добавить в шаблоны возможность вызова pfRuntime:compact
    С одной стороны не красиво, но бывает нужно при обработке больших массивов, а подключение классов из шаблонов
    совсем не катит.
    
  * Рефакторинг движка: сделать возможность использования разных языков шаблоннов,
    добавить XSL и FastTemplate.     
    
    XSLT шаблоны:
      Шаблон компилируется по правилам для pt-шаблонов, т.е. можно внутри шаблонов использовать парсеровские теги.
      [Возможно стоит по-умолчанию сделать запрет на такие действия для пущей безопасности.]
      Переменные шаблона преобразовываются в xml через класс xmlBuilder:
      <root> 
        <var1>value1</var1>
        <var2>value2</var2>
      </root> 
      И делаем трансформацию.                                                         

pfString
  * Добавить методы bin2dec
  - Добавить методы int2hex И hex2int

sql/pfSQL
  + Сделать накапливание статистики

Коллекции
  - Сделать возможность импортировать в словарь другой словарь.
  ? Интелектуальный импорт хеша в коллекции (с лексикографической сортировкой с учетом порядка чисел)
  + Для списка строк сделать метод has
     $list[^pfList::create[one, two, three]]
     ^if(^list.has[three]){В списке есть "three"}
 
  ? Реализовать метод equals во всех коллекциях
  ? Сделать поиск в pfList

pfOS               
  - Добавить возможность импорта части функций для текущей платформы:
    pfOS_posix.p, psOS_win.p - partial-классы с сметодами специфическими для конкретной OS.
    Импортируем в pfOS:auto[]

  + pfOS:tempFile[aPath;aVarName]{aCode}
    Формирует уникальное имя для временного файла в папке aPath[/].
    Имя запиывается в переменную с именем $aVarName в вызывающем коде.
    Файл удаляется с диска, после выполнения кода aCode.
    + Имя файла: path/pid_uid64.tmp
    
    ^pfOS:tempFile[path;tempFileName]{
      $string[Some where]
      ^string.save[$tempFileName]
    }   
    
  - pfOS:walk[aPath;aFileName]{aCode}[aOptions]
    Обходит дерево файлов начиная с aPath и выполняет для каждого найденного файла aCode.
    Имя файла попадает в переменную aFileName.
    
  - pfOS:absolutePath[aPath]
    Возвращает полный путь к файлу.
    document-root: /home/site/public/root/
    uri: /blog/archive
    ^pfOS:absolutePath[/css/blog] -> /home/site/public/root/css/blog  
    ^pfOS:absolutePath[/../temp] -> /home/site/public/temp  
    ^pfOS:absolutePath[../images] -> /home/site/public/root/blog/images
    
    def normpath(path):
        """Normalize path, eliminating double slashes, etc."""
        if path == '':
            return '.'
        initial_slashes = path.startswith('/')
        # POSIX allows one or two initial slashes, but treats three or more
        # as single slash.
        if (initial_slashes and
            path.startswith('//') and not path.startswith('///')):
            initial_slashes = 2
        comps = path.split('/')
        new_comps = []
        for comp in comps:
            if comp in ('', '.'):
                continue
            if (comp != '..' or (not initial_slashes and not new_comps) or
                 (new_comps and new_comps[-1] == '..')):
                new_comps.append(comp)
            elif new_comps:
                new_comps.pop()
        comps = new_comps
        path = '/'.join(comps)
        if initial_slashes:
            path = '/'*initial_slashes + path
        return path or '.'


    def abspath(path):
        """Return an absolute path."""
        if not isabs(path):
            path = join(os.getcwd(), path)
        return normpath(path)
    
    def isabs(s):
        """Test whether a path is absolute"""
        return s.startswith('/')

  
pfRuntime
  - pfRuntime:measure[aVarName]{aCode}  
    Измеряет время выполнения и ресурсы потраченные за время выполнения блока aCode.
    Результат в виде хеша записывается в переменную aVarName
    

Тесты
  * Доделать полноценную систему классов для тестирования

* Типы данных
  types/pfDecimal
	types/pfMoney
	types/pfDate

* Работа с правами пользователей (видимо на основе политик)
	auth/pfSecurity

* Портировать классы для работы с PgSQL, MSSQL
	sql/pfPgSQL
	sql/pfMSSQL
      

  
---------------------------------

* Скрипт pf-admin.py, который создает необходимые папки и скрипты для стандартного pf-проекта. 
* ORM?

