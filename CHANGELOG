PF Library
Copyright (c) Oleg Volchkov
-------------------------------------

CHANGELOG
=========

0.9.4
-----       

20.04.2011
  1. Убрано требование точного совпадения параметров в pfRouter.resolve.

12.04.2011
  1. Произведена оптимизация подсчета числа протегированного контента в pfSQLTags (для невидимых тегов). 
     Исправлена мелкая ошибка в схеме базы данных для таблицы tags_items (стоял лишний auto_increment).

28.03.2011
  1. Начал реанимацию классов типографики для работы с utf-8. Типографика работает, правда для корректной работы требует 
     мелкого патча в самом Парсере для поддержки unicode properties в метаподстановках \b.

26.03.2011
  1. Класс pfHTTPRequest теперь умеет определять put- и delete-запросы на основании поля _method post-запроса.
  2. Класс pfSiteManager понимает параметр конструктора aOptions.request, т.е. теперь можно передавать свои объекты с запросом. 
  3. В метод pfSiteModule.redirectTo добавлен параметр isPermanent, который позволяет задать тип редиректа.

25.03.2011
  1. Рефакторинг sql-классов. Упорядочена работа с транзакциями, ключ конструктора isNaturalTransactions переименован
     в isNatural (старый ключ объявлен "запрещенным", но совместимость оставлена).

13.03.2011
  1. Удалил из библиотеки "брошенный" порт Джанговских форм - web/forms. Видимо надо сделать какие-то хелперы
     в стиле RoR, а не делать монструозную систему работы с формами, поддержка которой потребует достаточно 
     больших усилий.

08.03.2011
  1. В классе pfAuthDBStorage поправлена работа с md5-хешированными паролями и добавлен алгоритм хеширования sha1.

04.03.2011
  1. Класс pfAuthDBStorage:
     - добавлены методы userAdd, userModify, userDelete, allUsers;
     - в методе getUser добавлен параметр aOptions.active;
     - в конструктор добавлен параметр aOptions.salt.     
  2. В классе pfAuthApache лоигн доступен и через user.login (раньше только черещ user.id).
  3. Написал небольшое описание для классов авторизации (auth/auth.txt).

02.03.2011
  1. pfSiteModule.render автоматически предает в шаблон не только REQUEST, но и текущие ACTION и метод linkTo модуля.

25.02.2011
  1. pfSiteModule.render автоматически предает в шаблон текущий объект запроса, доступный в нем через переменную $REQUEST.
  2. В pfRouter.assign можно включить строгий режим проверки шаблона ($.strict(true)).

24.02.2011
  1. Очередная правка pfCFile: исправлена работа с куками, сессиями и пост-запросами.        

23.02.2011
  1. Рефакторинг pfCFile: "простые" опции вынесены в хеш и задаются в цикле, метод options теперь задает параметры 
     также как и метод load.

18.02.2011
  1. В pfSQLSettings добавлена возможность задания имен колонок для ключей и значений, исправлены мелкие ошибки.
  2. В pfSQLSettings исправлена работа с content_type_id, которая приводила к "потере контента". 

11.02.2011
  1. Новый метод pfSQL.safeInsert.
  2. Новый дженерик - sql/generics/settings/pfSQLSettings.p.

06.02.2011
  1. Новые методы pfTemple.multiAssign[aVars], pfSiteModule.multiAssignVar[aVars], которые позволяют задать 
     сразу несколько переменных. Параметр aVars должен поддерживать интерфейс foreach. 
  2. В pfClass добавлены методы int, double, bool, которые улучшают совместимость всех наследников с базовыми типами.
  3. В pfClass добавлены методы contains и foreach, которые улучшают совместимость всех наследников с хешем.
  4. Новый метод pfClass.alias, который создает алиас для метода внутри текущего класса.
  5. Новый метод pfClass.unless - if наоборот.

06.12.2010
  1. В лог sql-запросов класса pfSQL добавлены поля: type (тип запроса), memory (объем памяти в KB, которую 
     использовал Парсер в процессе выполнения запроса), results (число результатов, которые вернул запрос; 
     для хеша возвращается число корневых элементов, т.е. при использовании опций distinct/type результат
     может быть не совсем корректным). 
  2. Исправлена мелкая ошибка, которая приводила к некорректному вычислению размера identityMap в статистике запросов.

30.11.2010
  1. Теперь pfRouter поддерживает опережающие и негативные проверки в requirements.

20.11.2010
  1. В конструктор pfSQLTags::create теперь можно передать имена таблиц (раньше только префиксы).
  2. Новый метод = pfSQLTags.sqlJoinForTags (sqlJoinForContent наоборот).

22.10.2010
  1. Мелкие правки в pfModule и pfRoute для совместимости с новым void(base: string) в версии 3.4.1. 
  
06.10.2010
  1. Класс pfURLTranslit переконвертирован в UTF-8.
  2. Первый адекватный вариант класса sql/generics/tags/pfSQLTags.p - система тегирования контента в SQL-базах.
       
23.09.2010
  1. Закомитил в основное дерево начальную версию класса sql/generics/tags/pfSQLTags.
     Класс - глубокая бета.

07.09.2010
  1. Исправлена обработка пустых трапов в маршрутах в pfRouter. Теперь не надо писать лишние роуты без трапов.
  2. Создание объекта для pfModule._router делается в свойстве router. Это позволяет прозрачно переопределять 
     класс роутера в наследниках.
  3. В pfSiteModule "оборачивание" ответов экшнов перенесено в processAction.
  4. В pfSiteManager можно передать опцию $.passManagerPost, которая отменяет стандартную постобработку 
     ответов менеджера. Это нужно, если dispatch вызывается вручную из экшнов.

06.09.2010
  1. Рефакторинг pfModule.dispatch - код разнесен на три метода: processRequest, processAction, processResponse.
     Теперь можно очень гибко влиять на каждую стадию прохождения запроса.
  2. Удален метод pfSiteModule.dispatch, а его функционал вынесен в методы processAction и processResponse.
     Кроме того, в эти методы добавлены параметры, которые позволяют пропускать некоторые стадии формирования результата.
	3. Теперь модули можно монтировать по пути любой вложенности.
	4. Новое свойство - pfModule.activeModule в которое попадает имя активного вложенного модуля.
 
0.9.3
-----        

04.09.2010
  1. Новое свойство - pfModule.PARENT, содержащее ссылку на объект-контейнер. 
     
31.08.2010
  1. Новое свойство - pfModule.appendSlash(true), которе включает добавление в конец ссылки, формируемой методом linkTo. 
     Это свойство передается вложенным модулям при их создании, т.е. все вложенные модули унаследуют значение 
     appendSlash от своего контейнера.
  2. Добавлена возможность рекурсивного импорта шаблонов для pfTemple parser-engine.

25.08.2010
  1. В pfModule добавлено свой свойство request в которое попадают параметры запросы из текущего диспатча.
     Нужно это для того, чтобы была возможность получить доступ к запросу из post-обработчиков.
  2. Поправлены мелкие ошибки в pfMySQL.setLastInsertId. Метод pfMySQL.lastInsertId теперь возвращает строку, 
     а не число - это позволяет работать с bigint-полями в качестве ключа.
    
09.08.2010
  1. При логировании sql-запросов теперь сохраняются значения limit и offset.

08.08.2010
  1. В pfSiteModule.authFabric добавлена возможность создания классов для apache- и cookie-типов авторизации.

06.08.2010
  1. Теперь в pfModule.assignModule не производится производится use, если нам не передали имя файла.

02.08.2010
  1. Теперь pfSiteModule не выдает ошибку, если не определена строка подключения к БД. Т.е. для приложений, которые 
     не используют БД не надо задавать "фейковую" строку соединения.

30.07.2010
  1. Исправлена ошибка в процедуре поиска обработчиков в модулях, теперь в pfSiteModule действительно работает цепочка:
     onAction -> onINDEX (для корня) -> onDEFAULT -> onNOTFOUND.
  2. Вызов обработчика onINDEX теперь доступен и для pfModule. Фактически теперь считаем, что для корневого маршрута
     имя экшна - onINDEX.
  3. pfSiteModule.onNOTFOUND теперь не зовет onINDEX, а делает редирект на корень модуля.

29.07.2010
  1. Исправлена процедура поиска обработчиков в pfSiteModule. Теперь цепочка поиска выглядит так:
     onAction -> onINDEX (для корня) -> onDEFAULT -> onNOTFOUND.

05.07.2010
  1. В pfRouter.assign добавлена опция $.ignoreCase(true), которая позволяет сделать маршрут регистро-зависимым.
  2. Сделаны правки в pfModule, позволяющие обрабатывать через pfRouter, маршруты с оригинальным регистром символов,
     т.е. теперь в pfModule.rewriteAction и в dispatch'и вложенных модулей передается экшн с оригинальным регистром 
     символов. Это изменение может быть несовместимо со старым кодом в крайне специфических случаях, но теперь 
     при переопределении rewriteAction может возникнуть необходимость явно менять регистр символов (раньше экшн всегда
     приходил в этот метод в нижнем регистре).

25.06.2010
  1. Класс templete/pfTemplete тепрь считается устаревшим и перемещен в папку templete/obsolete. 
     Полностью класс будет удален в версии 0.9.4.
  2. Добавлена документация на шаблонизатор - templet/pfTemple.txt.       
  3. Переделана схема маршрутизации в pfSiteModule. Теперь можно делать обработчки для каждого из HTTP-методов:
     onActionPOST, onActionPUT и пр. Если обработчик для конкретного метода не найден, то пытаемся вызвать его
     общую версию - onAction (не рекомендуется писать отдельные обработчики для метода GET - пусть он обрабатывается 
     обычным onAction). Обработчки http-метода доступна и для onINDEX (onINDEXPOST, onINDEXPUT).

23.06.2010
  1. Реализована полноценная схема наследования в parser-engine для pfTemple. 
     Наследование одиночное, т.е. у каждого шаблона может быть только один предок. Для вызова метода из предка 
     можно использовать штатную парсеровскую конструкцию ^BASE:method[]. Обратите внимание, что метод main шаблонов 
     автоматически переименовывается в __main__ поэтому для вызова его из предка необходимо писать ^BASE:__main__[].
     Кроме того, в parser'овских шаблонах можно использовать директиву #@IMPORT path/to/template.pt, позволяющая включать 
     в текущий шаблон методы из внешних шаблонов. Наследование в импортируемых шаблонах не поддерживается.

22.06.2010
  1. Написал с нуля новый шаблонный движок - templet/pfTemple.                                  
     - Модульная архитектура энжинов - теперь можно использовать разные шаблонизаторы (реализован только классический Parser-engine).
     - Файловый сторадж теперь умеет кешировать текст шаблонов в памяти. Кроме того можно задавать несколько путей для поиска шаблонов.
     - Parser-engine теперь поддерживает множественно наследование:
       - В файле может присутствовать несколько псевдокоментариев, определяющих пути к предкам: #@BASE path/to/template
       - Цепочка шаблонов компилируется в один общий шаблон.
       - Поиск предков идет от папки текущего шаблона, а если не найден, то по штатным путям. 
         Причем направление обхода обратное: самый последний путь обходится первым.
     - Сделано разделение на глобальные и локальные переменные. Метод assign устанавливает глобальные переменные для всего движка,
       которые можно частично или полностью перекрыть, передав в метод render опцию $.vars[hash]. 
       Теперь нет необходимости для каждого модуля создавать свой экземпляр шаблонизатора.
     - Все классы (включая файловый сторадж и parser-engine) для базового движка расположены в одном файле - templet/pfTemple.p
     - Из движка убрано кеширование - теперь это необходимо делать внешними средствами.
  2. pfSiteModule теперь использует pfTemple в качестве движка шаблонов. В подмодули передается объект с шаблонизатором.
       
21.06.2010
  1. Сделал автоматическую выкладку архива с транком в раздел downloads на Google Code - 
     http://code.google.com/p/parser3-pf/downloads/list
     Но настоятельно рекомендую привыкать к хорошему и использовать svn-клиенты.

20.06.2010
  1. Исправлена ошибка в pfRouter.reverse, которая приводила к некорректной обработке рутового маршрута.
     Кроме того, метод теперь возвращает корректный prefix.

16.06.2010
  1. Рефакторинг класса pfDBAuthStorage:
     - Добавлена поддержка нескольких типа хеширвоания паролей. Для совместимости со старым методом
       хеширования необходимо передать конструктору $.crypt[mysql].
     - Новый метод passwordHash.
     - Мелкие правки кода.
  2. В pfSiteManager добавлен метод postAS-IS, который просто возвращает ответ.

13.06.2010                                           
  1. В класс pfRuntime добавлен простой профилировщик:
     ^pfRuntime:resources[] - возвращает хеш с текущими данными о ресурсах (памяти и времени).
     ^pfRuntime:profile{code}[comment] - выполняет код и вычисляет ресурсы, потребляемые кодом
     ^pfRuntime:profiled.last - результат последнего вызова метода profile.
     ^pfRuntime:profiled.all - результаты всех вызовов метода profile.
     $pfRuntime:enableProfilerLog(true) - false отключает накапливание результатов профилирования.

14.05.2010                                                                       
  1. В библиотеку добавлен раздел api в который будут попадать классы для работы с различными веб-сервисами.
  2. Новый api-класс - api/mobile/sms/pfAmegaSMSGate. 
     Интерфейс для http://www.amegainform.ru/usl_sms/index.html.

05.05.2010
  1. Новый класс - pfCFile, который реализует интерфейс класса file для libcurl (Парсер версии не ниже 3.4.1).
     Содержит три статических метода pfCFile:load, pfCFile:session, pfCFile:options. Метод pfCFile:load автоматически
     создает сессию, если его вызвали вне контекста метода pfCFile:session.

21.04.2010
  1. Исправлены ошибки в pfString:parseURL, добавлен разбор nameless-параметра и "якоря".

31.03.2010
	1. Свойства pfClass.isDynamic и pfClass.isStatic тереь используют reflection:dynamical.
	2. Свойства, создаваемые методом pfClass.defProperty теперь возвращают корректные значения для bool/int переменных. 

17.03.2010
  1. Изменена схема блокировок в классе pfAntiFlood - теперь сначала производится работа с ключами в хранилище,
     после чего хранилище разблокируется и выполняется код. Это позволяет обойти ограничение в 10 секунд, которое
     установлено для блокировок в Парсере. 
  2. Оптимизация в классе pfSql - теперь вместо pfDictionary используется hash.

08.03.2010
  1. В класс pfCollection добавлены методы int, double, bool, asHash (в pfDictionary он перекрыт другой реализацией).

07.03.2010
  1. Рефакторинг классов pfHTTPRequest, pfHTTPRequestHeaders и pfHTTPRequestMeta - добавлен метод get[aName;aDefault].
  2. Новые классы pfHTTPResponseBadRequest и pfHTTPResponseNotModified. Исправлено несколько мелких ошибок в pfHTTPResponse.p
  3. Новые методы и свойства в классе pfHTTPRequest: ^contains, ^getFullPath, ^buildAbsolutePath, $HOST.
  4. pfSiteManager и pfSiteModule теперь корректно используют классы pfHTTPResponseRedirect*. 
     
31.01.2010
  1. В коллекции добавлены методы pfCollection.break и pfCollection.continue (аналогично Парсеровским ^break и ^continue), 
     которые срабатывают внутри pfCollection.foreach.
  2. Новый метод pfRouter.reverse, который находит и  строит правильный путь по имеющимся маршрутам.
  3. Проведена оптимизация кода pfModule и pfRouter для повышения производительности
     операций маршрутизации. 

27.01.2010
  1. В классе pfAntiFlood теперь используется file:lock для пессиместической блокировки.

03.01.2010
  1. Новый метод - pfOS:walk[aPath;aVarName]{aCode}[aSeparator], который обходит дерево файлов 
     начиная с aPath и выполняет для каждого найденного файла aCode.

02.01.2010
  1. Метод pfClass.cleanMethodArgument теперь заменяет пустые сроки на хеш.
  2. Новый метод - pfOS:absolutePath[aPath;aBasePath[$request:document-root]], который возвращает полный путь к файлу.

25.12.2009
  1. Новый класс - web/helpers/pfAntiFlood, который обеспечивает интерфейс для защиты
     форм от повтороной обработки.

13.10.2009
  1. В конструкторе pfHTTPRequest добавлена возможность задания полей запроса через конструктор.

02.09.2009
  1. Новый класс - web/pfHTTPResponse, который имплементирует логику работы с ответами веб-модулей. 
     Теперь ответы модулей заворачиваются не в хеши, а в этот класс.
  2. Наследники pfHTTPResponse: pfHTTPResponseRedirect, pfHTTPResponsePermanentRedirect,
     pfHTTPResponseNotFound, pfHTTPResponseForbidden, pfHTTPResponseNotAllowed,
     pfHTTPResponseGone, pfHTTPResponseServerError
  3. Метода pfSiteModule.redirectTo теперь обрабатывается в диспетчере модуля, а не менеджере - 
     логика обработки почти не изменилась.
    
08.07.2009
  1. Новый метод - pfOS:hashFile[aFileName;aVarName;aCode]

28.06.2009
  1. Новый метод - pfTempletPattern.compact, который вызывает принудительную сборку мусора в шаблоне.
  Бывает нужно при обработке больших массивов в шаблонах.

21.06.2009
  1. Новый метод - pfString:trim[aString;aSide;aSymbols]. 

20.06.2009
  1. В коллекции добавлен метод has[aString], который проверяет наличие в коллекции строки $aString.
     $list[^pfList::create[one, two, three]]
     ^if(^list.has[three]){В списке есть "three"}                                  
     Для словарей (pfDictionary) проверяются значения (value).

  2. Новый метод - pfOS:tempFile[aPath;aVarName;aCode]
     Формирует уникальное имя для временного файла в папке aPath[/].
     Имя запиывается в переменную с именем $aVarName в вызывающем коде.
     Файл удаляется с диска, после выполнения кода aCode.
     + Имя файла: path/pid_uid64.tmp
     ^pfOS:tempFile[path;tempFileName]{
       $string[Some where]
       ^string.save[$tempFileName]
     }

  3. В классе pfValidate регулярные выражения, использующиеся для проверки вынесены в переменные класса, 
     чтобы упросить их использование в пользовательских классах.
  
  4. В конструкторе коллекций теперь можно задавать дополнительные параметры для импорта таблиц:
     aOptions.type[string|hash] - если задан тип string (default), то берем значения из первого столбца таблицы,
                                  если задан тип hash, то в коллекцию попадет хеш строки таблицы.
     aOptions.key[] - имя столбца из которого берется значение, если не задано, то берем самый левый столбец.


12.06.2009
  1. Из pfModule убраны лишние process'ы. Свойства modModule заменены на эмуляцию через GET_DEFAULT.
   
31.05-2.06.2009
  0. Изменен номер текущей версии транка на 0.9.3, т.к. в библиотеке произошли несовместимые изменения в модуле pfModule. 
     Для бибилотеки теперь действует лицензия MIT.
  
  1. Метод pfModule.dispatch теперь принимает третий параметр aOptions.
     Необходимо добавить во все наследники этого метода возможность приема и передачи по цепочке этого параметра.
     Сейчас доступен только один параметр aOptions.prefix - это префикс для урлов. Внутри стандартного dispatch'а
     этот параметр записывается в свойство uriPrefix модуля. Это позволяет делать вложенные модули, которые считают себя 
     частью контейнера, а заодно позволяет делать uri системы в REST-стиле.
  2. Кардинально переделана система маршрутизации экшнов в модулях.
     - Метод addRewritePattern удален.
     - Для маршрутизации применяется объект router (класс modules/pfRouter): методы router.assign и router.root.
     - Изменен язык шаблона для преобразования экшнов.
       Подробности об использовании новой системы маршрутизации см. в файле TECHNOTES.


0.9.2
-----

02-03.05.2009
  1. Мелкие правки в коде pfSQL. Сделано корректное логирование запросов: тепреь сохраняются void запросы
     и сделана правильная последовательность логирование start/commit запросов.
     Для посторения ключа в IM теперь используется sha1 вместо md5.
 
26.04.2009
  1. Исправлены архитектурные ошибки в классах коллекций, которые приводили к избыточному потреблению памяти
     и низкой производительности при работе с большими коллекциями. По большей части проблема касалась 
     класса pfList.
 
21.04.2009
  1. Класс pfSQL теперь умеет логировать запросы. Если конструктору класса передать параметр
     aOptions.enableQueriesLog, то в переменной pfSQL.stat.queries[$.query $.time] будет накапливаться
     список (pfList) всех запросов и время их выполнения (с микросекундами). В лог попадают только те запросы, 
     которые реально передаются sql-серверу.
  2. Рефакторинг sql-классов: имена методов приведены к принятому в pf стилю (date_diff -> dateDiff).
     Некоторое количество мелких правок в sql-классах.
             
19.04.2009
  1. Метод pfModule._makeLinkURI теперь ставит слеш после экшна, если экшн не заканчивается расширением 
     (фактически смотрим на точку в последней части экшна).

16.04.2009
  1. Теперь коллекции могут принимать в качестве параметра конструктора строку. Строка разбивается 
     на подстроки (CSV-формат), которые добавляются в коллекцию. Теперь можно использовать конструктор 
     списка, очереди и стека для парсинга строки в формате CSV.
     ^pfList::create[one, two, three, "encloser, test"] -> [one;two;three;encloser, test] 
  2. Класс pfArrayList переименован в pfList. Класс pfArrayList оставлен как алиас на pfList 
     для совместимости со старым кодом.

06.04.2009
  1. Рефакторинг pfClass:
     - удалено свойство isSerializable
     - удалены методы serialize, deserialize
     - для сериализации/десериализации рекомендуется использовать методы __asString __fromString
       в коде класса сделаны соответствующие комментарии
 
30.03.2009
  1. Теперь в pfCollection.foreach не выдается ошибка при попытке итерации пустой коллекции.
  2. Разработка переведена из локального svn-репозитория на Google Code:
     http://code.google.com/p/parser3-pf/

16.03.2009
  1. Рефакторинг pfTemplet. В метод render добавлен ключ $.force, который отменяет кеширование
     и обеспечивает принудительное перекомпилирование шаблона.
     [Нужно, если шаблон вызывается рекурсивно.]

14.03.2009
  1. В класс pfSQL добавлен сбор статистики по общему времени выполнения запросов (stat.queriesTime).

06.01.2009
  1. Библиотека переведена в кодировку UTF-8. Сделаны исправления для обеспечения 
     совместимости с unicode-версией PCRE.  

14.12.2008
  1. Рефакторинг коллекций: 
     В pfArrayList и pfDictionary появилась возможность получать элементы коллекций
     с помощью default getter - dict.key, array.index.
     Теперь проверка существования элемента в массиве и словаре производится через
     встроенную функцию хешей - contains.

13.12.2008
  1. Новый класс pfHTTPRequest, который имплементирует логику работы с запросами.
     Вспомогательный класс pfHTTPRequestMeta (прокладка к env).
     Вспомогательный класс pfHTTPRequestHeaders (прокладка к заголовкам запроса),
     теперь можно написать aRequest.HEADERS.User-Agent
  2. Рефакторинг: свойства isSecure, METHOD (переименовано из "method"), isGET, 
     isPOST, isPUT, isDELETE, isHEAD, isAJAX, isSECURE (переимновано из "isSecure") 
     перенесены в pfHTTPRequest. 
  3. Рефакторинг: теперь pfSiteManager использует pfHTTPRequest для обработки запросов.
     Фактически теперь в обработчики передается этот объект, а не хеш.
     Рекомендуется вместо aActionArgs использовать имя aRequest.


12.12.2008
  1. Исправлена ошибка в коде кеширования шаблонов в pfTemplet.

07.12.2008
  1. Доделал переход от метода display к методу render в pfTemplet.
     Теперь рекомендуется везде использовать метод render.
  2. Рефакторинг pfTempletPattern - теперь свойства не компилируются в класс,
     а используется default getter (Парсер 3.3.0).
  3. Теперь переменные добавленные в шаблон объединяются с переменными, переданными
     в метод pfTemplet.render.

01.12.2008
  1. pfCurlFile теперь умеет пропускать заголовок http-ответа с кодом 100 (Сontinue).

17.11.2008
  1. Рефакторинг: компиляция шаблона вынесена в метод pfModule._compileRewritePattern,
     который возвращает хеш с откомпилированным шаблоном и таблицей переменных.
  1. Теперь в pfModule путь к экшну разбивается не только обратный слеш, но и точка.
     Таким образом экшн /one/two.three/ приводит к вызову обработчика onOneTwoThree.
  2. В методе pfModule.addRewritePattern новый параметр aOptions.defaults - хеш, который
     будет добавлен к параметрам экшна.
     ^addRewritePattern[one/:two(/:three)?;test;$.defaults[$.three[default]]]
     test/123 -> $.two[123] $.three[default]
     Удобно использовать для задания дополнительных значений для экшна.
  3. Теперь нет необходимости добавлять к шаблону параметр aOptions.isStatic - если в шаблоне
     нет переменных (:arg), то он автоматически помечается как статический.
  2. Метод pfString.rsplit теперь возвращает пустую таблицу, если не задан текст.

07.11.2008
  1. Теперь для каждого pfSiteModule создается свой собственный экземпляр шаблонного движка (TEMPLET).
     Фактически во вложенные модули теперь передается templetOptions. Это изменение может быть 
     несовместимо со старым кодом.

06.11.2008
  1. Метод pfModule.goTo переименован в pfModule.redirectTo. (Для goTo оставлена заглушка.)
  2. Метод pfSiteModule.display переименован в pfSiteModule.render. (Для display оставлена заглушка.)
  3. Теперь протокол https определяется по переменной env:HTTPS[on], а уже во вторую очередь
     по порту (443).
  4. В pfSiteModule добавлены свойства isSecure, method (http-метод), isGET, isPOST, isPUT, 
     isDELETE, isHEAD, isAJAX.
  5. В конструктор класса pfAuthCookie добавлен параметр aOptions.secureCookie.
  6. pfSiteModule теперь добавляет в параметры обработчиков поле $._cookie, содержащее хеш со всеми cookie.
  7. В результирующем хеше ответа экшна pfSiteModule теперь может присутствовать поле $.cookie, 
     содержимое которго будет передано в куки браузера.
  8. Мелкие правки в pfSiteModule и pfSiteManager.
	
03.11.2008
  1. Метод pfClass.cleanMethodArgument теперь пишет пустой хеш только в неопределенную переменную.
  2. Мелкие правки в pfModule.

30.10.2008
  1. Добавлено и исправлено множество правил в wiki/pfTypografika.

22.09.2008
  1. Новый метод - pfClass.unsafe[aCode;aCatchCode].

14.06.2008
  1. В коллекции добавлена возможность возвращать количество элементов в скалярном контексте.
     ^if($arrayList){...}
     Доступно только в Парсере 3.3.0.

11.05.2008
  1. Новый метод - pfString:format[aFormatString;aValues] 

15.04.2008
  1. Исправлена ошибка с обработкой экспшнов внутри pfSQL.transaction.

17.03.2008
  1. Исправил ошибки при обработке кавычек в модуле pfTypografica, при наличии в тексте тегов.
     А также ошибку обработки троеточия.

16.03.2008
  1. Расширен язык rewrite patterns до "path1/path2/:arg1/(:arg2<regex>(/:{arg3}-arg4)?)?".
     Т.е. теперь можно указывать непостоянные участки урлов "(...)?", но использовать 
     в скобках "или" (|) нельзя.

14.03.2008
  1. Теперь pfAuthCookie умеет получать данные сессии не только из кук, но и из формы.
  2. Рефакторинг pfSiteManager - в отдельные методы вынесена аутентификация и формирование aActionArgs.

12.03.2008
  1. Поправил в sql-классах работу с транзакциями. Теперь поддерживается нормальная работа 
     с транзакционными энжинами.
  2. Теперь в реврайт-паттернах корректно обрабатываются ведущие слеши.
  3. Добавлено несколько асертов.

04.03.2008
  1. Новый метод pfImageMagick.normalize.
  2. Новый метод pfImageMagick.makePreview.
  3. Новый метод pfImageMagick.applyWatermark.

18.02.2008
  1. В pfClass добавлен метод try-finally.
  2. Новый класс - images/pfImageMagick.

30.01.2008
  1. Поправил обработку двойных знаков препинания в pfTypografica.

08.01.2008
  1. pfSiteModule теперь добавляет в параметры обработчиков поля:
     $._files, $._imap, $._qtail.

02.01.2008-08.01.2008
  1. Добавлен класс io/pfCurlFile. 

04.01.2008
  1. В методы класса pfAssert добавлены внятные source для throw.

02.01.2008
  1. Метод pfString:parseURL возращает теперь и оригинальный URL (result.url).
  2. Поправлен класс pfSQL - теперь корректно обрабатывается метод file.sql-string.
     Добавлен метод pfSQL.processQuery.

05.12.2007
  1. Рефакторинг в pfSQL в части кода кеширования. Поправлены мелкие ошибки.
  2. Класс pfSQL теперь умеет автоматически вычислять ключи для кеша и identityMap.

04.12.2007
  1. Метод pfClass.typeOf теперь умеет определять тип переменной с помощью свойства
     CLASS_NAME (появилось в Парсере 3.2.2).

03.12.2007
  1. Теперь для pfCache нужен Парсер не ниже 3.2.2 (в нем исправлен баг с junction).
     Зато теперь не нужно писать хитровывернутый код для получения данных.

01.12.2007
  1. Исправлена ошибка в классе pfCache приводившая к неправильной работе при задании нулевого
     времени кеширования. Поправлены модульные тесты.
  2. В класс pfCache добавлены методы для кеширования типов bool, date, xdoc. 

15.11.2007
  1. Исправлена ошибка в методе pfClass.cleanMethodArgument - не обрабатывался параметр метода.
  2. В класс pfSQL добавлена возможность сохранения результатов запросов в отдельной коллекции.
     При повторном запросе данные обращения к базе или кешу не будет.
     Для включения этой возможности надо передать конструктору $.enableIdentityMap(1).
     Отключить работу с коллекцией можно для любого запроса. Для этого надо передать
     aOptions.isForce(1).
     Ключ вычисляется на основании параметтров запроса (с учетом offset и limit), но можно сформировать
     и свой собственный ключ и передать запросу aOptions.identityMapKey.
  3. Рефакторинг класса pfConsole - теперь он потребляет значительно меньше памяти (строки
     накаплииваются в хеше, а при выдаче формируется единый вывод).

21.10.2007
  1. Если методу pfSiteModule.display передать имя шаблона с ведущим слешем,
     то к его названию не будет подставлен pfSiteModule.templatePath.
     Бывает нужно, если необходимо обратиться к "общему" шаблону.

13.09.2007
  1. Исправлена ошибка в pfSiteModule: подмодулям не передавалась 
     ссылка на sql-класс.

12.09.2007
  1. Модуль pfTypografica теперь умеет прикреплять слова к числам
     и понимает кубические и квадратные м/см. Поправлены мелкие баги.
     

31.08.2007
  1. В pfClass добавлен метод @_abstractMethod[].
  2. Из класса pfString удален метод isEmail - 
     пользуйтесь pfValidate:isValidEmail.
  3. Мелкие рефакторнинги почти во всех классах 
     по следам http://www.parser.ru/forum/?id=62333.
  4. Изменил структуру файлов и папок в web/forms.
     pfWebForm переименован в pfForm.

27.08.2007
  1. В pfClass добавлен метод:
       @defProperty[aPropertyName;aVarName;aType]
       Написаны unit-тесты для него.

  2. В pfClass добавлено два alias'а:
       @defReadProperty[aPropertyName;aVarName]
       @defReadWriteProperty[aPropertyName;aVarName]

  3. В pfClass добавлен метод 
       @cleanMethodArgument[aName]. 
       Надоело в начале методов писать: 
       ^if(!def $aOptions || !($aOptions is hash)){$aOptions[^hash::create[]]}

26.08.2007
  1. Исправлена ошибка в pfModule: неправильно компилировался параметр 
     aOption.source метода assignModule.
     Исправленный модуль добавлен в ветку 0.9.1.

24.08.2007
  1. Начата работа над модулями для работы с web-формами.
     web/forms/
       pfWebForm, pfWFFields, pfWFWidgets

0.9.1
-----

16.08.2007
  1. Написаны методы и тесты для pfValidate:
     @isExistsURL[aString;aOnlyHTTP]
     @isWellFormedXML[aString]
     @isWellFormedXMLFragment[aString]
     @isValidANSIDatetime[aString]

  2. Исправлены ошибки в pfValidate.isValidURL.
  4. Добавлена обработка параметров запроса (?...)
     в pfString.parseURL.

15.08.2007
  1. Написаны методы и тесты для pfValidate:
     @isValidURL[aString;aOnlyHTTP]
  2. Исправлена ошибка в pfString:parseURL - мог обрабатываться
     некоректный URL. 

14.08.2007
  1. Переписан метод pfClass.typeOf - теперь он использует 
     конструкцию "case-when".
  2. Написаны методы и тесты для pfValidate:
       @isValidDouble[aString]  

06.08.2007
  1. Рефакторинг базового класса коллекций (схема итераторов):
      1.1 Добавлены свойства currentIndex и currentItem.
      1.2 Добавлены методы rest, moveNext.
      1.3 Написан универсальный метод foreach.
  2. Проведен рефакторинг классов коллекций для поддержки 
     новой схемы итераторов.
  3. Написаны тесты для коллекций.
  4. Поправлены мелкие баги в классах коллекций.

  Фактически теперь достаточно переопределить в классе-потомке 
  реализацию свойства currentItem, чтобы заработал метод foreach.

  5. Немного почистил папки - удалил модули, которые начинал делать,
     но так и не написал ничего кроме шапки класса. :)

22.07.2007
  1. Написаны методы и тесты для pfValidate:
       @isValidIPV4Address[aString]
       @isValidEmail[aString]

20.07.2007
  1. Начата работа над классом types/pfValidate.
     Подготовлен основа для класса и юнит-тестов.
  2. Написаны методы и тесты для pfValidate:
       @isEmpty[aString]
       @isNotEmpty[aString]
       @isAlphaNumeric[aString]
       @isSlug[aString]
       @isLowerCase[aString]
       @isUpperCase[aString]

19.07.2007
  1. В класс pfString добавлен метод parseURL. Сделан набор тестов.

05.07.2007
  1. В класс pfAuthBase добавлена опция в конструктор $.debugMode - 
     возможность логина без указания пароля.
  2. Мелкие правки кода в pfWikiFormatter и pfTypografica.

03.07.2007
  1. Исправлена ошибка в pfSiteModule.assignModule - добавлены проверка 
     типа aOptions.

23.06.2007
  1. В переменную pfWebModule._templatePath сразу записывается $uriPrefix - 
     теперь шаблоны по-умолчанию имеют структуру урлов.

17.06.2007
  1. В класс pfSQL добавлено свойство stat в котором накапливается статистика
     запросов (пока только $.queriesCount).

12.06.2007
  1. Мелкие правки в коде pfModule и pfSiteModule.
  2. Добавил возможность статических преобразований (описание во вчерашнем логе).
  
11.06.2007
  1. Значительно упростилось создание правил для "реврайта" экшнов.
     1.1 В класс pfModule добавлены методы:
         @addRewritePattern[aPattern;aNewAction;aOptions]
           Добавляем шаблон в карту преобразований.
         @_parseActionByPattern[aPattern;aAction][lPattern;lKeys;lMatches]
           Разбираем экшн на основании шаблона и возвращаем хеш с полученными данными.
         Карта преобразований лежит в переменной  $pfModule._rewriteMap (pfArrayList). 
     1.2 Метод pfModule.rewriteAction теперь умеет искать соответствия в карте 
         преобразований и реврайтить экшны.
     1.3 Шаблоны (patterns) для преобразований имеют следующий "язык":
         path1/(path2|path3)/:arg1/:arg2<regex>/:{arg3}-arg4
         :arg - имя переменной в выходном хеше
         <regex> - регулярное выражение, которое уточняет формат в котором должна 
                   прийти переменная.
         (path|path3) - выражение, которое интерпретируется как регулярное выражение, 
                        при этом левая скобка будет заменена на "(?:". 
                        Не рекомендуется использовать! 
                        Возможно будет исключено в следующих версиях, поскольку затрудняет
                        обратное преобразование урлов.
         :{arg4} - аналогично штатному синтаксису Парсера, отделяет имя переменной от
                   ненужных символов.
     1.4 Пример.
         На входе имеем экшн: traffic/10.10.10.1/2007/5/31
         В конструкторе прописываем паттерны:         
           $lIPPattern[\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}]
           ^addRewritePattern[traffic/:ip<$lIPPattern>;traffic]
           ^addRewritePattern[traffic/:ip<$lIPPattern>/:year<\d{4}>;traffic]
           ^addRewritePattern[traffic/:ip<$lIPPattern>/:year<\d{4}>/:month<\d{1,2}>;traffic]
           ^addRewritePattern[traffic/:ip<$lIPPattern>/:year<\d{4}>/:month<\d{1,2}>/:day<\d{1,2}>;traffic]
         После реврайта (в последнем случае - в остальных полей будет поменьше) получим хеш:
           $.action[traffic]
           $.args[$.ip[10.10.10.1] $.year[2007] $.month[5] $.day[31]]
     1.5 Возможны статические преобразования. Если при добавлении шаблона указать опцию 
         $aOptions.isStatic(1), то шаблон будет считаться регулярным выражением, 
         которое должно совпать с экшном. При этом из экшна не будут "выкусываться" никакие 
         переменные, а редирект пройдет на $aNewAction, а вкачестве аргументов 
         для обработчика будут использованы $aOptions.args.
         Будьте очень аккуратны с этой возможнотью!
     1.6 Если будет необходимо сделать специфическое преобразование, то просто перекрываем 
         pfModule.rewriteAction.
              
24.05.2007
  1. Убрал лишние строки в выдаче шаблона Темплета (не везде стоял result).

13.05.2007
  1. Дополнена схема обработки событий в pfSiteModule: теперь в модуле есть служебное
     событие onINDEX, которое вызывается, как обработчик "по-умолчанию" для экшнов
     без обработчиков. Если в модуле определен обработчик onNOTFOUND, то он он вызывается
     для всех неизвестных экшнов, кроме корневого ("/").
 
30.04.2007
  1. Теперь pfSiteManager определяет протокол по которому работает пользователь (http|https)
     на основании переменной $env:SERVER_PORT (443 порт == https; тестировалось на Апаче).

0.9.0
-----

26.03.2007
  1. В pfSiteModule добавлена схема "post dispatch". Теперь можно определять собственные
     обработчики результата выполнения метода dispatch.
     Любой обработчик ("onDo") может возвратить хеш [$.type $.body], который будет 
     передан методам "postTYPE" или "postDEFAULT". Если методы не найдены, то никакая 
     обработка не проводится.
     Если из обработчика вернулся не хеш (или хеш без поля type), то ответ "заворачивается"
     в хеш и передается обработчику. Для строк и чисел полю type присваивается значение
     $responseType, для всего остального - "unknown".
  2. В класс pfSiteModule добавлено свойство responseType (описание см. выше).
  3. Перевел pfSiteManager на использование схемы "post dispatch". Теперь менеджер
     обрабатывает ответы "html", "xml", "text", "file".  

15.03.2007
  1. Провел рефакторинг кода "модулей". В классе pfModule очищен метод goTo - 
     теперь его реализация полностью легла на плечи программиста.
     В классах pfSiteModule и pfSiteManager реализован новый механизм редиректа:
     теперь метод goTo вызывает эксепшн, а ловит его диспетчер в менеджере.
  2. Переделал механизм обработки урлов при редиректе - теперь используется только
     таинтинг, без матчей.

25.02.2007
  1. Сделал в pfSiteManager объединение $form:fields и $form:tables.
     Теперь в $aActionArgs._tables попадает содержимое $form:tables.

26.01.2007
  1. Рефакторинг pfSiteModule: вызов фабрик вынесен в свойства.
     В опции конструктора добавлена переменная sqlConnectString.

23.01.2007
  1. В класс pfSiteModule добавлены методы assignVar, display 
     и свойство templatePath. Это прокладки до соответствующих
     методов объекта TEMPLET.
     Теперь в обработчиках экшнов можно просто написать 
     ^display[main] вместо ^TEMPLET.display[/path/to/template/main.pt] 
     и ^assignVar[name;value] вместо ^TEMPLET.assign[name;value].
     Важно! Если в методе display не задано имя шаблона, то считаем, 
     что имя шаблона "default".
  2. Произведен рефакторинг классов pfSiteModule и pfSiteManager.
     Устранено сильное дублированеи кода.

18.01.2007
  1. Добавлен класс pfScroller. Фактически класс-адаптер 
     для класса скроллера Михаила Петрушина.
  2. Дописал несколько "правил" в CODESTYLE.

13.01.2007
  1. Метод pfModule.dispatcher переименован в pfModule.dispatch. 
  2. Немного изменена логика работы pfModule.dispatch: если в модуле
     определен экшн с именем модуля (onModule), то зовем экшн, а не метод
     dispatch модуля. 
  3. Рефакторинг Templet'а - вставил использование pfAssert в методах.

09.01.2007
  1. Добавлен класс collections/pfDictionary, реализующий
     упорядоченный хэш (словарь).
  2. Во все коллекции добавлен метод clear, очищающий коллекцию.

28.11.2006
  1. Добавлен класс auth/pfAuthApache, обрабатывающий штатную 
     Апачевскую авторизацию.
  2. Исправлены пути к pfCache.p в некоторых модулях.

06.11.2006
  1. Рефакторинг коллекций: сделан супер-класс pfCollection, 
     добавлена возможность импорта коллекции в контсрукторе.
  2. В класс pfAssert добавлен метод pass.
  3. В sql-классы добавлена работа с серверными транзакциями. 
     В базовый класс перенесены методы для унификации запросов.

05.11.2006
  1. Изменена структура библиотеки - все классы убраны в тематические папки.
  2. Все (кроме статических) классы сделаны наследниками pfClass.
  3. В дистрибутив добавлена лицензия (pf/LICENSE).
  4. Написан черновик "стандартов кодирования" (pf/CODESTYLE).
  5. Добавлен класс collections/pfQueue.

03.11.2006
  1. Добавлен класс collections/pfArrayList.

02.11.2006
  1. Начата работа над системой юнит-тестов. 
     tests/pfTestCase
     tests/pfAssert
  2. Добавлен класс pfConsole.
  3. Сделан рефакторинг класса collections/pfStack (теперь как хранилище используется хэш).

06.10.2006
  1. Сделано кеширование результатов в pfSQL.
  2. Поправлены мелкие ошибки в pfCache.

24.09.2006
  0. Давно уже надо было вести лог... :)
  1. Добавлен класс pfOS (функции для работы с файловыми системами).
  2. Добавлен класс pfBrowser.
  3. Переделал в паре мест дефолтные фабрики.
  4. В класс pfString добавлен метод dec2bin.
  
  