PF Library
Copyright (c) Oleg Volchkov
http://oleg.volchkov.net
---------------------------

Базовый класс pfClass
=====================

  Является предком большинства классов библиотеки, т.е. его методы можно использовать в модулях, шаблонах и прочих местах.
  Автоматически подключает класс pfAssert.

  
  Методы для работы с параметрами и свойствам:
  
  @_abstractMethod[]
  - Выбрасыает pfAssert:fail. Рекомендуется вставлять в абстрактные методы.

  @cleanMethodArgument[aName1;aName2;...;$aName10]
  - Метод проверяет пришел ли вызывающему методу
    параметр с именами $aName1[aOptions], $aName2... $aName10
  - Если пришел пустой параметр или строка, то записываем в него пустой хеш.

  @defProperty[aPropertyName;aVarName;aType]
  - Добавляет в объект свойство с именем aPropertyName
    ссылающееся на переменную $aVarName[_$aPropertyName].
  - aType[read] - тип свойства (read|full: только для чтения|чтение/запись)

  @defReadProperty[aPropertyName;aVarName]
  - Добавляет свойство только для чтения.

  @defReadWriteProperty[aPropertyName;aVarName]
  - Добавляет свойство для чтения/записи.
 
  @typeOf[aValue]
  - Возвращает строку с типом переменной aValue

  @alias[aName;aMethod]
  - Создает алиас для метода.


  Методы для совместимости с базовыми классами:

  @int[aDefault]
  - Перобразует объект в int.

  @double[aDefault]
  - Перобразует объект в double.

  @bool[aDefault]
  - Перобразует объект в bool.

  @contains[aName]
  - Проверяет есть ли у объекта поле с именем aName.

  @foreach[aKeyName;aValueName;aCode;aSeparator]
  - Обходит все поля объекта.


  Полезные методы:

  @try-finally[aCode;aCatchCode;aFinallyCode]
  - Оператор try-catch-finally. Гарантированно выполняет блок 
    finally даже если в коде или обработчике ошибок произошло исключение.
  - Блок finally можно опустить.

  @unsafe[aCode;aCatchCode]
  - Выполняет код и принудительно обрабатывает все exceptions.
  - В случае ошибки может дополнительно выполнить aCatchCode.

  @unless[aCond;aFalseCode;aTrueCode]
  - if наоборот.


Рефлексия
=========
  Методы начинаются с двух знаков подчеркивания.

  @pfWebRequest.__add[]
  Используется в pfWebRequest (метод __add вызывается из pfModule)
  для обхода конфликта имен.
  

Сериализация
============  

  Предполагается, что классы могут реализовывать (полностью или частично) интерфейc для сериализации объектов в строковое или xml-представление. 

  @__asString[]
    Формирует строковое представление объекта класса (сериализация)
    Проверка на сериализуемость объекта: ^if($object.__asString is junction)

  @__fromString[aString]
    Метод, который позволяет создать объект класса из строки (десериализация)
    При динамическом вызове должен заполнять текущий экземпляр данными.
    При статическом вызове должен возвращть объект текущего класса с данными.
    Проверка на десериализуемость объекта: ^if($object.__fromString is junction)

  @__asXML[aOptions]
    Формирует сроку с xml-представлением объекта класса (сериализация)
    Метод должен возвращать xml без начального <?xml>-тега.
    Проверка на сериализуемость объекта: ^if($object.__asXML is junction)
    aOptions.passRoot(false) - не создавать root-тег.
    aOptions.rootName - название root-элемента [по-умолчанию используется имя класса]
    aOptions.rootAttributes - строка с дополнительными атрибутами, которые надо 
                             добавить root-элементу [нужно для сериализации элементов коллекций]
    aOptions.namespace

  @__fromXML[aXML;aOptions]
    Метод, который позволяет создать объект класса из строки с xml-предсавлением (десериализация)
    При динамическом вызове должен заполнять текущий экземпляр данными.
    При статическом вызове должен возвращть объект текущего класса с данными.
    Проверка на десериализуемость объекта: ^if($object.__fromXML is junction)
    aOptions.passRoot(false) - не учитывать root-тег.
    aOptions.rootName - название root-элемента [по-умолчанию используется имя класса]
    aOptions.namespace

Контроллеры
===========

 = pfModule:
    Класс позволяет вызывать методы класса (модуля), а также методы "вложенных" модулей, используя uri-подобные строки. Обычно в проектах используются его наследники pfSiteModule и pfSiteManager, которые расширяют функционал pfModule для работы с вебом (см. ниже).

    В любой модуль может быть вложено произвольное количество других модулей. Глубина иерархии модулей не ограничена.
    Добавление вложенного модуля:
    @assignModule[aName;aOptions]
    ## Добавляет вложенный модуль aName
    ## aOptions.class - имя класса
    ## aOptions.file - файл с текстом класса
    ## aOptions.source - строка с текстом класса (если определена, то плюем на file)
    ## aOptions.compile(0) - откомпилировать модуль сразу 
    ## aOptions.args - опции, которые будут переданы конструктору.
    ## aOptions.faсtory - метод, который будет вызван для создания модуля
    ##                    Если определен, то при компиляции модуля вызывается код, 
    ##                    который задан в этой переменной. Предполагается, что в качестве 
    ##                    кода выступает метод, который возвращает экземпляр.
    ##                    Если определена $aOptions.args, то эта переменная будет
    ##                    передана методу в качестве единственного параметра.
    ##                    Пример:
    ##                     ^addModule[test;$.factory[$moduleFactory] $.args[test]]
    ##                      
    ##                     @moduleFactory[aArgs]
    ##                       $result[^pfModule::create[$aArgs]]
    
    Вложенные модули поддерживают процедуру "ленивой загрузки", т.е. компиляция текста модуля и создание объекта происходит только при попытке выхова модуля при маршрутизации или при вызове свойства modName.
    
    Запуск маршрутизации осуществляется через метод
    @dispatch[aAction;aRequest]
    ## aAction    Действие, которое необходимо выполнить
    ## aRequest   Параметры экшна
   
    
 == Базовая схема маршрутизации
    Обработчиками экшнов являются методы модулей, имена которых формируются по схеме onActioName, а сами методы принимают один еинственный параметр в который передается объект (по-умолчанию хеш), который содержит параметры экшна. Экшны регистронезависимы, т.е. some/action и SoMe/AcTIon приведут к вызову одного и того же обработчика. 
    
    Метод dispatch пытается отыскать для экшна "/some/action/name.ext" (концевые слэши удаляются перед обработкой и не влияют на результат) в текущем модуле метод-обработчик по следующим правилам (правила выполняются последовательно, после первого совпадения обработка прекращается):                                      
    - Если у нас имеется вложенный модуль some, то вызывается метод dispatch модуля some, которому передается часть экшна следующая за именем модуля (action/name.ext). Можно перехватить вызов метода вложенного модуля создав в основном модуле метод onSome. В этом случае методика вызов вложенного модуля определяется программистом. 
    - Если в модуле определен метод onSomeActionNameExt (экшн переводится в нижний регистр, разбивается на части по слешам и точкам, первые буквы частей преобразовываются в верхний регистр и все части объединяются в строку), то вызываем его. Для корневого (пустого) маршрута пытаемся вызвать onINDEX.
    - Если в модуле определен метод onDEFAULT, то вызываем его. 
   
    
 == Расширенная маршрутизация
    Для обработки сложных экшнов предусмотрена гибкая схема преобразования экшнов на основе шаблонов.
   
    Программист может определить свою собственную схему маршрутизации перекрыв в модуле метод:
    @rewriteAction[aAction;aRequest]
    ## Вызывается каждый раз перед диспатчем - внутренний аналог mod_rewrite.
    ## $result.action - новый экшн.
    ## $result.args - параметры, которые надо добавить к аргументам и передать обработчику. 
    ## $result.prefix - локальный префикс, который необходимо передать диспетчеру

    pfModule предоставляет схему преобразования урлов на основе механизма, реализованного в классе pfRouter. Добавление правил преобразования производится путем вызова метода assign объекта pfModule.router класса pfRouter.                     
    
    @assign[aPattern;aRouteTo;aOptions]
    ## Добавляет новый шаблон aPattern в список маршрутов 
    ## aRouteTo - новый маршрут (может содержать переменные)
    ## aOptions.defaults[] - хеш со значениями переменных шаблона "по-умолчанию" 
    ## aOptions.requirements[] - хеш с регулярными выражениями для проверки переменных шаблона
    ## aOptions.prefix[] - дополнительный, вычисляемый префикс для путей (может содержать переменные)
    ## aOptions.reversePrefix[] - префикс маршрута при бэкрезолве
    ## aOptions.name[] - имя шаблона (используется в reverse, нечувствительно к регистру)
    ## aOptions.ignoreCase(true) - игнорироавть регистр букв при обработке шаблона
    ## aOptions.strict(false) - включает "строгий" режим проверки шаблона.
    ## aOptions.render[$.template $.vars] - хеш с параметрами шаблона, который надо выполнить. 
    
    Шаблон aPattern может содержать статические части, а также переменные, которые будут переданы как параметры обработчику, определяемому по пути в переменной aRouteTo. 
    
    Рассмотрим пример шаблона:
    path1/path2/:some/:where/:{arg1}-:arg2.:format/*trap
    дополнительные условия: aOptions.requirements[$.where[\d+] $.arg2[\d+]]
    
    Переменные шаблона начинаются с двоеточия. Если возникает неоднознаяная ситуация с определением имени переменной (например, в случае, когда следующий за переменной текст начинается с символа, который может быть в переменной), то необходимо заключать имя переменной в фигурные скобки(:{name}). Переменная, начинающаяся со звездочки поглощает в себя всю оставшуюся часть пути (*name). Для более точного распознавания маршрутов рекомендуется задавать регулярные выражения для переменных через aOptions.requirements.           
    Обратите внимание, что динамическая часть шаблона (начинается с места объявления первой переменной) является необязательной. При этом можно задать хеш aOptions.defaults - переменные из него будут использоваться, если не удалось найти переменную в маршруте. 
    Если задать aOptions.strict(true), то динамическая часть шаблона становится обязательной. В этом случае путь должен содержать все переменные, указанные в шаблоне.              
    Новый маршрут (aRouteTo) может содержать переменные, которые будут получены после применения к оригинальному маршруту или будут заданы через aOptions.defaults. Если переменную найти не получится, то будет возбуждено искючение.

    Для задания преобразования дл пустого маршрута (aPattern[]) необходимо использовать метод pfModule.router.root:
    @root[aRouteTo;aOptions]
    ## Добавляет действие для пустого роута
    ## aRouteTo - новый маршрут (может содержать переменные)
    ## aOptions.defaults[] - хеш со значениями переменных шаблона "по-умолчанию" 
    ## aOptions.prefix[] - дополнительный, вычисляемый префикс для путей (может содержать переменные)   
    ## aOptions.render[$.template $.vars] - хеш с параметрами шаблона, который надо выполнить. 

    Непосредственное преобразование маршрута выполняется методом pfModule.router.route:
    @route[aPath;aOptions]
    ## Выполняет поиск и преобразование пути по списку маршрутов
    ## result[$.action $.args $.prefix]    
    
    Метод пытается найти первый подходящий шаблон и выполняет преобразование маршрута или возвращает оригинальный маршрут. После первого совпадения дальнейшая обработка прерывается. Вызов этого метода производится автоматически в pfModule.rewriteAction. 
    Обратите внимание, что располагать маршруты надо в порядке "от частного к общему", что важно для процедуры бэкрезолва путей.
    
    
    === Пример преобразования
    
    ^router.assign[:id/:ip/*trap;ip/:ip/:trap;
      $.requirements[
        $.ip[\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}] 
        $.id[\d+]
      ] 
      $.prefix[/clients/:id]
    ]       

    ^router.route[111/192.168.0.1/some/action/path]
    result: [ 
      $.action[ip/192.168.0.1/some/action/path]
      $.args[
        $.id[111]
        $.ip[192.168.0.1]
        $.trap[/some/action/path]
      ]
      $.prefix[/clients/111]
    ]


    === Префиксы
    
    Префикс (aOptions.prefix), вычисляемый для маршрута, может быть полезен при организации иерархий модулей и использовании REST-маршрутов.
    

    -----------------
    Внутренние детали
    
    Рассматриваемый шаблон будет преобразован в следующее регулярное выражение:
    ^path1\/path2(?:\/([^\./]+)(?:/(\d+)(?:/([^\./]+)-(\d+)(?:\.([^\./]+)(?:/(.+))?)?)?)?)?$    
      
    Применение шаблона к пути path1/path2/got/123/23-45.xml/last/path/part даст следующий результат:
    $.some[got] $.where[123] $.arg1[23] $.arg2[45] $.format[xml] $.trap[last/path/part]
    -----------------     


 == Составление и бэкрезолв путей  
    
    На основании маршрутов, заданных в модуле можно производить обратное преобразование (бэкрезолв). Для бэкрезолва путей применяется метод @linkTo[aAction;aOptions;aAnchor], который выполняет следующие операции:
    - Пытается найти в роутере маршрут с подходящим экшном или именем (aAction) и набором параметров - сигнатурой (aOptions). aOptions может быть как хешем, так и любым другим объектом, который через свойство fields возвращает доступные поля в виде хеша.
    - Если маршрут найден, то по его шаблону формируется строка с путем. Параметры, не входящие в сигнатуру, добавляются к пути в качестве параметров (?key=value).
    - Если маршрут не найден, то метод формирует штатный шаблон: aAction/aOptions.foreach[k;v]{$k=$v}[&].
    - К полученному пути добавляется "якорь" - #aAnchor.
    Процесс обратного преобразования достаточно ресурсоемкий, поэтому есть некоторые ограничения:
    - Если в маршруте поле routeTo содержит переменные, то такой маршрут по имени экшна найден не будет - добавьте маршруту имя и используйте его для бэкрезолва.
 
 == Модули и менеджеры сайта (pfSiteModule)
  
    В качестве параметра обработчики получают объект класса pfHTTPRequest, который является оберткой над классами form, env, cookie и позволяет более удобно работать с http-заголовками ($aRequest.HEADERS.[User-Agent]), определять http-методы, ajax-запросы и пр. Настоятельно рекомендуется исключить в обработчиках прямое обращение к классам form, env, cookie и пользоваться только средствами pfHTTPRequest.
  
    Для каждого из HTTP-методов можно писать свои обработчики: onActionPOST, onActionPUT и пр. Если обработчик для конкретного метода не найден, то пытаемся вызвать его общую версию - onAction (не рекомендуется писать отдельные обработчики для метода GET - пусть он обрабатывается обычным onAction). 

    Обычно браузеры не поддерживают отправку форм методами PUT и DELETE, поэтому для их имитации можно использовать поле формы _method, а саму форму отправлять методом POST:
    <form method="post">
      <input type="hidden" name="_method" value="put" />
      <input type="submit" />
    </form>
    В этом случае pfHTTPRequest будет считать, что запрос пришел методом PUT.
 
    Добавлен обработчик onNOTFOUND (вызывается, если не найден обработчик). Если определен обработчик onDEFAULT, то обработчик onNOTFOUND вызван не будет.
 
    Класс pfSiteModule (наследник pfModule) расширяет схему маршрутизации и позволяет производить постобработку результатов работы обработчиков.
    Ответом модуля может быть строка или объект с обязательными полями type и body. Строка автоматически оборачивается в класс pfHTTPResponse: сама строка попадает в поле body, а тип ответа задается исходя из переменной responseType модуля.

    Есть несколько наследников pfHTTPResponse, которые можно удобно использовать, если необходимо вернуть ответ с различными http-статусами:
    pfHTTPResponseRedirect, pfHTTPResponsePermanentRedirect, pfHTTPResponseNotFound, pfHTTPResponseForbidden, pfHTTPResponseNotAllowed, pfHTTPResponseGone, pfHTTPResponseServerError.

    Примеры:

    @onSomeAction[aRequest]
      $result[^pfHTTPResponse::create[Simple response!]]

    @onRedirectAction[aRequest]
      ^model.update[]
      $result[^pfHTTPResponseRedirect::create[/done]]
    
    @onNOTFOUND[aRequest]
      $result[^pfHTTPResponseNotFound::create[Page not found!]]


    В pfSiteModule определен удобный метод-шорткат для редиректов - redirectTo[aAction;aOptions;aAnchor;aIsPermanent]. Метод возбуждает исключение, поэтому при вызове метода выполнение экшна прерывается в месте вызова метода. Первые три параметры аналогичны методу linkTo и автоматически строят правильный url для экшна, параметр aIsPermanent определяет тип редиректа: false - временный (302; используется по-умолчанию), true - постоянный (301). В aAction можно передать полный путь (начинающийся с http:// или https://), тогда редирект будет выполнен по указанному адресу, без вызова метода linkTo.
    
    Примеры:
    ^redirectTo[entry;$.id[123]] - временный редирект внутри модуля.
    ^redirectTo[http://parser.ru;;](true) - постоянный редирект на внешний ресурс.
     

    Обработчик ответа будет вызываться после диспатча по следующему алгоритму: сначала пытаемся вызвать обработчик postTYPE, а если его нет, то зовем postDEFAULT.

    #@postHTML[aResponse]
    #@postXML[aResponse]
    #@postTEXT[aResponse]
    #@postDEFAULT[aResponse]
    #@postREDIRECT[aResponse]

    # aResponse[$.type[html|xml|file|text|...|redirect] $.body[] ...] - объект (обычно наследник pfHTTPResponse) или хеш с данными ответа.
    Поля, которые могут быть обработаны контейнерами (pfSiteManager) и выданы браузеру:
      .content-type[] .charset[] .headers[] .status[] .cookie[]
      Для типа "file" можно положить ответ не в поле body, а в поле download, что по результату аналогично response:body и response:download.

   Метод pfSiteModule.render автоматически передает в шаблоны переменные REQUEST, ACTION и текущий методы linkTo и redirectTo, если они ранее не заданы через assignVar или не переданы в качестве переменных шаблона.

   Кроме того, pfSiteModule поддерживает прямой рендеринг шаблонов, без вызова обработчиков (упрощается реализация «активных шаблонов»; фактически не нужно писать обработчики, которые делают только вызов шаблона). Для использования прописываем следующий маршрут в конструкторе модуля:
   ^router.assign[active/:slug/*trap;active][
     $.render[
       $.template[actve.pt]
       $.vars[
         $.var1[value 1]
         $.var2[value 2]
       ]
     ]
   ]                   
   В этом случае модуль не будет искать обработчик onActive, а сразу вызовет шаблон active.pt, который получит все переменные, заданные через assignVar, а также переменные, заданные в маршруте. Получить доступ из шаблона к переменным маршрута (в примере - «slug» и «trap») можно через переменную REQUEST ($REQUEST.slug). Результат работы шаблона обрабатывается так же, как и ответ обработчика, т.е. он полностью проходит все стадии post-обработки, что позволяет полноценно заменить обработчик шаблоном.
   
   Модуль можно сделать менеджером. Менеджер отличается от обычного модуля только тем, что умеет выдавать результат работы браузеру, правильно устанавливая заголовки. Раньше менеджер должен был быть наследником класса pfSiteManager, но сейчас достаточно просто передать в конструктор любого модуля параметр $.asManager(true) и он сможет выполнять действия менеджера.
   

   
    

